Adapter versus Bridge

Adapter focuses on resolving incompatibilities between two existing interfaces(different from facade
pattern which create a new interface.),generally to avoid replicating code.It's a way of making
two independently designed classes work together without reimplementing one or the other.
The coupling is unforeseen

Bridge, bridges an abstraction and its (potentially numerous) implementations
It provides a stable interface to clients even as it lets you vary the classes that implement it
the user of a bridge understands up-front that an abstraction must have several implementations,
and both may evolve independently

The Adapter pattern makes things work after they're designed; Bridge makes them work before they are.


Composite versus Decorator versus Proxy
Decorator is designed to let you add responsibilities to objects without subclassing.

Composite has a different intent. It focuses on structuring classes so that many related
objects can be treated uniformly and multiple objects can be treated as one
Its focus is not on embellishment but on representation.

Both lead to the kind of design in which you can build applications just by plugging objects together
without defining any new classes.

Decorator and Proxy patterns describe how to provide a level of indirection to an object.

Unlike Decorator, the Proxy pattern is not concerned with attaching or detaching properties
dynamically, and it's not designed for recursive composition. Its intent is to provide a
stand-in for a subject

In the Proxy pattern, the subject defines the key functionality, and the proxy
provides (or refuses) access to it. In Decorator, the component provides only
part of the functionality, and one or more decorators furnish the rest.
Decorator addresses the situation where an object's total functionality can't be determined at
compile time, at least not conveniently. That open-endedness makes recursive composition an
essential part of Decorator.
Proxy focuses on one relationship—between the proxy and its subject—and that relationship can be
expressed statically